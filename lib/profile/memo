// //  search bar and filter
                    // Row(
                    //   mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    //   children: [
                    //     //  search bar
                    //     Flexible(
                    //       flex: 85,
                    //       child: TextField(
                    //         controller: searchBarController,
                    //         keyboardType: TextInputType.multiline,
                    //         autocorrect: false,
                    //         textInputAction: TextInputAction.go,
                    //         onChanged: (value) {
                    //           searchModel.updateTitleValue(value.trim());
                    //         },
                    //         onSubmitted: (value) {
                    //           //  검색 실행 함수
                    //           FocusScope.of(context).unfocus();
                    //         },
                    //         onTapOutside: (value) {
                    //           FocusScope.of(context).unfocus();
                    //         },
                    //         style: TextStyle(
                    //           color: MyThemeColors.myGreyscale[300],
                    //         ),
                    //         decoration: InputDecoration(
                    //           contentPadding: const EdgeInsets.only(
                    //               left: 15, right: 15, top: 10, bottom: 10),
                    //           enabledBorder: OutlineInputBorder(
                    //             borderSide: const BorderSide(
                    //               color: Colors.transparent,
                    //             ),
                    //             borderRadius: BorderRadius.circular(10),
                    //           ),
                    //           focusedBorder: OutlineInputBorder(
                    //             borderSide: const BorderSide(
                    //               color: MyThemeColors.primaryColor,
                    //               width: 1.5,
                    //             ),
                    //             borderRadius: BorderRadius.circular(10),
                    //           ),
                    //           fillColor: MyThemeColors.myGreyscale[700]
                    //               ?.withOpacity(0.5),
                    //           filled: true,
                    //           hintText: '제목으로 검색',
                    //           hintStyle: TextStyle(
                    //             color: MyThemeColors.myGreyscale[300],
                    //           ),
                    //           suffixIcon: Padding(
                    //             padding: const EdgeInsets.only(right: 10),
                    //             child: IconButton(
                    //               onPressed: () {
                    //                 // 검색 실행 함수
                    //               },
                    //               icon: HeroIcon(
                    //                 HeroIcons.magnifyingGlass,
                    //                 style: HeroIconStyle.mini,
                    //                 color: (searchModel.dirayTitle.isNotEmpty)
                    //                     ? MyThemeColors.whiteColor
                    //                     : MyThemeColors.myGreyscale[300],
                    //               ),
                    //             ),
                    //           ),
                    //         ),
                    //       ),
                    //     ),

                    //     const SizedBox(
                    //       width: 12,
                    //     ),

                    //     //  filter button
                    //     Flexible(
                    //       flex: 15,
                    //       child: Container(
                    //         height: 45,
                    //         width: 45,
                    //         decoration: BoxDecoration(
                    //           color: MyThemeColors.myGreyscale[700]
                    //               ?.withOpacity(0.5),
                    //           borderRadius: BorderRadius.circular(10),
                    //         ),
                    //         child: Stack(
                    //           children: [
                    //             IconButton(
                    //               onPressed: () {
                    //                 showAnimatedDialog(
                    //                   context: context,
                    //                   barrierDismissible: false,
                    //                   animationType: DialogTransitionType
                    //                       .slideFromBottomFade,
                    //                   builder: (BuildContext context) {
                    //                     return SearchFilterDialog(
                    //                       searchModel: searchModel,
                    //                     );
                    //                   },
                    //                 );
                    //               },
                    //               icon: HeroIcon(
                    //                 HeroIcons.funnel,
                    //                 style: HeroIconStyle.solid,
                    //                 color: (searchModel.isFiltered())
                    //                     ? MyThemeColors.whiteColor
                    //                     : MyThemeColors.myGreyscale[300],
                    //               ),
                    //             ),
                    //             //  필터 적용 여부 표시
                    //             (searchModel.isFiltered())
                    //                 ? Positioned(
                    //                     top: 7,
                    //                     left: 27,
                    //                     child: Container(
                    //                       width: 10,
                    //                       height: 10,
                    //                       padding: const EdgeInsets.all(5),
                    //                       decoration: const BoxDecoration(
                    //                         shape: BoxShape.circle,
                    //                         color: MyThemeColors.secondaryColor,
                    //                       ),
                    //                     ),
                    //                   )
                    //                 : const SizedBox.shrink(),
                    //           ],
                    //         ),
                    //       ),
                    //     )
                    //   ],
                    // ),

                    // const SizedBox(
                    //   height: 20,
                    // ),

// ------------------------------------------------------------------------------------------------

/*
              //  diary list view
              Expanded(
                child: StreamBuilder(
                  //  searching condition
                  stream: calendarController.count == 2
                      ? FirebaseFirestore.instance
                          .collection('users')
                          .doc(userId)
                          .collection("diary")
                          .orderBy("date", descending: true)
                          .where("date",
                              isGreaterThanOrEqualTo:
                                  calendarController.formatStartDate(),
                              isLessThanOrEqualTo:
                                  calendarController.formatEndDate())
                          .snapshots()
                      : calendarController.count == 1
                          ? FirebaseFirestore.instance
                              .collection('users')
                              .doc(userId)
                              .collection("diary")
                              .orderBy("date", descending: true)
                              .where("date",
                                  isGreaterThanOrEqualTo:
                                      calendarController.formatStartDate(),
                                  isLessThanOrEqualTo:
                                      calendarController.formatOneDayEndDate())
                              .snapshots()
                          :
                          //  without condition
                          FirebaseFirestore.instance
                              .collection('users')
                              .doc(userId)
                              .collection("diary")
                              .orderBy("date", descending: true)
                              .snapshots(),
    
                  //  show list of diary
                  builder: (context, AsyncSnapshot<QuerySnapshot> snapshot) {
                    if (snapshot.hasError) {
                      return const Center(child: Text('Something went wrong'));
                    }
                    if (snapshot.connectionState == ConnectionState.waiting) {
                      return const Center(child: CircularProgressIndicator());
                    }
                    final List<Diary> diaries = snapshot.data!.docs
                        .map((DocumentSnapshot doc) => Diary.fromSnapshot(doc))
                        .toList();
    
                    //  Filter the diaries based on the entered text in the search bar
                    final String searchText =
                        searchBarController.text.toLowerCase();
                    final List<Diary> filteredDiaries = diaries
                        .where((diary) =>
                            diary.title.toLowerCase().contains(searchText))
                        .toList();
                    return SingleChildScrollView(
                      child: Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 15),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: List.generate(
                            filteredDiaries.length,
                            (index) {
                              final Diary diary = filteredDiaries[index];
                              return Padding(
                                padding: const EdgeInsets.only(bottom: 10.0),
                                child: Container(
                                  width: MediaQuery.of(context).size.width,
                                  decoration: BoxDecoration(
                                    borderRadius: BorderRadius.circular(10),
                                    color: Colors.white.withOpacity(0.9),
                                  ),
                                  child: Padding(
                                    padding: const EdgeInsets.all(20.0),
                                    child: Column(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.start,
                                      children: [
                                        Text(
                                          diary.date,
                                          style: TextStyle(
                                            fontWeight: FontWeight.w500,
                                            fontSize: 13,
                                            color: MyThemeColors.myGreyscale[400],
                                          ),
                                        ),
                                        const SizedBox(
                                          height: 10,
                                        ),
                                        Text(
                                          diary.title,
                                          maxLines: 1,
                                          overflow: TextOverflow.ellipsis,
                                          style: TextStyle(
                                            fontSize: 16,
                                            fontFamily: "Dodam",
                                            color: MyThemeColors.myGreyscale[800],
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                ),
                              );
                            },
                          ),
                        ),
                      ),
                    );
                  },
                ),
              ),
              */